/*
for(int i = 0; i < arr.GetArrLen(); i++)
    cout<<*(arr[i]);     이 문장을
    
for(int i = 0; i < arr.GetArrLen(); i++)
    cout<<arr[i];       이 문장으로 구성할 수 있도록 Point클래스를 대상으로 연산자 오버로딩을 진행하기.
*/

#include <iostream>
#include <cstring>

using std::cout;
using std::endl;
using std::ostream;

class Point
{
private:
	int xpos, ypos;
public:
	Point(int x = 0, int y = 0) : xpos(x), ypos(y) { }
	friend ostream& operator<<(ostream& os, Point& pos);
	friend ostream& operator<<(ostream& os,  Point* pos);
};

ostream& operator<<(ostream& os, Point& pos)
{
	cout << '[' << pos.xpos << ", " << pos.ypos << ']' << endl;
	return os;
}

ostream& operator<<(ostream& os, Point* pos)    //대상이 객체포인터일 경우의 연산자 오버로딩.
{
	cout << '[' << pos->xpos << ", " << pos->ypos << ']' << endl; //->(주소값에 접근)으로 데이터값을 출력.
	return os;
}

typedef Point* POINT_PTR;

class BoundCheckPointArray
{
private:
	POINT_PTR* arr;
	int arrlen;

	BoundCheckPointArray(const BoundCheckPointArray& arr) { }
	BoundCheckPointArray& operator=(const BoundCheckPointArray& arr) { }
public:
	BoundCheckPointArray(int len) : arrlen(len)
	{
		arr = new POINT_PTR[len];
	}
	POINT_PTR& operator[](int idx)
	{
		if (idx < 0 || idx >= arrlen)
		{
			cout << "Array index out of bound exception" << endl;
			exit(1);
		}
		return arr[idx];
	}
	POINT_PTR operator[](int idx) const
	{
		if (idx < 0 || idx >= arrlen)
		{
			cout << "Array index out of bound exception" << endl;
			exit(1);
		}
		return arr[idx];
	}
	int GetArrLen() const { return arrlen; }
	~BoundCheckPointArray() { delete[] arr; }
};

int main(void)
{
	BoundCheckPointArray arr(3);
	arr[0] = new Point(3, 4);
	arr[1] = new Point(5, 8);
	arr[2] = new Point(6, 7);

	for (int i = 0; i < arr.GetArrLen(); i++)
		cout << arr[i];   //배열의 이름도 포인터 이므로 포인터를 이용한 연산자 오버로딩이 가능하다.

	delete arr[0];
	delete arr[1];
	delete arr[2];
	return 0;
}
