#include <iostream>
#include <cstring>

using std::cout;
using std::endl;

class BoundCheckIntArray
{
private:
	int* arr;
	int arrlen;
	BoundCheckIntArray(const BoundCheckIntArray& arr) { }				//배열접근의 안전성을 높이기 위해
	BoundCheckIntArray& operator=(const BoundCheckIntArray& arr) { }	//복사연산자와 대입연산자를 원천적으로 막기
public:
	BoundCheckIntArray(int len) : arrlen(len)
	{
		arr = new int[len];
	}
	int& operator[](unsigned int idx)		//예제는 int idx로 설정하고 if문에 idx < 0 || idx >= arrlen 으로 되있음.
	{
		if (idx >= arrlen)
		{
			cout << "Array index out of bound exception" << endl;
			exit(1);
		}
		return arr[idx];
	}
  /*
  int operator[](unsigned int idx) const    //const를 이용해서 멤버함수의 오버로딩.
  {                                         //참조값이 아닌 배열요소의 값을 반환하는 형태로 정의
    if (idx >= arrlen)
    {
      cout << "Array index out of bound exception" << endl;
      exit(1);
    }
    return arr[idx];
  }
  */
	int GetArrLen() const { return arrlen; }
	~BoundCheckIntArray() { delete[] arr; }
};

void ShowAllData(const BoundCheckIntArray& ref) //객체의 배열에 저장된 모든요소를 출력하는 함수 추가
{
	int len = ref.GetArrLen();
	for (int idx = 0; idx < len; idx++)
		cout << ref[idx] << endl;    //ref[idx] -> ref.operator[](idx) operator함수가 const함수가 아니어서 컴파일 에러!
}                                //그렇다고 operator를 const 함수로 바꾸면 배열에 저장 자체가 안됨.

int main(void)
{
	BoundCheckIntArray arr(5);
	for (int i = 0; i < 5; i++)
		arr[i] = (i + 1) * 11;
	ShowAllData(arr);
	return 0;
}
