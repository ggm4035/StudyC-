/*2차원 배열접근에 대한 연산자 오버로딩을 진행.
class BoundCheck2DIntArray { ... } 형식의 2차원배열 클래스를 선언 후
BoundCheck2DIntArray arr2d(3, 4); 객체 실행 시 세로3, 가로4인 int형 2차원배열 처럼 동작하는 arr2d객체가 생성되어, 
다음의 형태로 데이터에 저장 및 참조할 수 있어야 한다.

	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 4; j++)
			arr2d[i][j] = i + j;

	for (int i = 0; i < 3; i++)
	{
    for (int j = 0; j < 4; j++)
			cout<<arr2d[i][j]<<' ';
    cout<<endl;
  }
  참고로 두 개의 []연산자를 동시에 오버로딩 하는 것은 허용하지 않기 때문에, 위의 다음 문장은,
  
  arr2d[i][j]
  
  두 번의 []연산자 호출을 동반하게끔 구현해야 한다. 즉, 첫 번째 []연산에 의해서 위의 문장은 다음과 같이 해석되어야 하며
  
  (arr2d.operator[](i))[j];
  
  그리고 arr2d.operator[](i) 연산의 반환값을 이용해서 두번째[]연산은 다음과 같이 해석되어야 한다.
  
  ((반환 값).operator[])(j);
  */
  
  #include <iostream>

using std::cout;
using std::endl;
using std::ostream;

class BoundCheck2DIntArray
{
private:
	int widthLenth, heighLenth;               //2차원 배열의 길이.형태 ex) 가로3 세로4인 2차원 배열일때. widthLenth = 3, heighLenth = 4가 입력됨.
	int posWid, posHei, arrCount;             //posWid와 posHei는 2차원 배열 위치 값. ex) arr2d[1][2]    posWid = 2, posHei = 1이 입력됨.
	int* arr;                                 //arrCount는 []연산자의 첫번째와 두번째 호출을 구분하는 변수
	BoundCheck2DIntArray(const BoundCheck2DIntArray& ref) { }
	BoundCheck2DIntArray& operator=(const BoundCheck2DIntArray& ref) { }
public:
	BoundCheck2DIntArray(int heigh, int width) 
		: heighLenth(heigh), widthLenth(width), posWid(0), posHei(0), arrCount(0)
	{
		arr = new int[widthLenth * heighLenth];       //2차원 배열의 전체 길이 = 행 길이 * 열 길이
	}
	BoundCheck2DIntArray& operator[](const int num)
	{
    if (num >= widthLenth || num >= heighLenth)   //초기 설정한 행, 열 길이보다 큰 값을 입력 시 경고문 호출
    {
      cout<<"Array index out of bound exception"<<endl;
      exit(1)
    }
		if (arrCount == 0)      //첫번째 []연산자 호출 시
		{
			posHei = num;
			arrCount++;
		}
		else      //두 번째 []연산자 호출 시
		{
			posWid = num;
			arrCount = 0;   //다시 첫번째 []연산자를 호출하도록 변수 초기화
		}
		return *this;
	}
	friend ostream& operator<<(ostream& os, const BoundCheck2DIntArray& ref);
	BoundCheck2DIntArray& operator=(int num)          //int 값을 객체 내 arr배열에 대입하는 연산자 정의
	{
		arr[posHei * widthLenth + posWid] = num;        //2차원 배열값을 입력할때(arr2d[1][2]) 이를 1차원 배열의 위치값으로 변환하는 수식
		return *this;                                   //ex) 행4, 열3인 2차원 배열인 arr2d가 arr2d[1][2]로 입력 시 1차원 배열의 위치값은
	}                                                 //1 * 4 + 2 = 6, 1차원 배열 arr[6]과 같은 위치에 있다.
	~BoundCheck2DIntArray()
	{
		delete[] arr;
	}
};

ostream& operator<<(ostream& os, const BoundCheck2DIntArray& ref)
{
	cout << ref.arr[ref.posHei * ref.widthLenth + ref.posWid];
	return os;
}

int main(void)
{
	int num = 0;
	BoundCheck2DIntArray arr2d(3, 4);

	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 4; j++)
			arr2d[i][j] = ++num;

	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 4; j++)
			cout << arr2d[i][j] << ' ';
		cout << endl;
	}
	return 0;
}
