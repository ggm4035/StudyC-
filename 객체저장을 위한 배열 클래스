#include <iostream>
#include <cstring>

using std::cout;
using std::endl;
using std::ostream;

class Point
{
private:
	int xpos, ypos;
public:
	Point(int x = 0, int y = 0) : xpos(x), ypos(y) { }
	friend ostream& operator<<(ostream& os, Point& pos);
};

ostream& operator<<(ostream& os, Point& pos)
{
	cout << '[' << pos.xpos << ", " << pos.ypos << ']' << endl;
	return os;
}

typedef Point* POINT_PTR;	//Point 포인터 형을 의미하는 POINT_PTR정의.

class BoundCheckPointArray
{
private:
	POINT_PTR* arr;	//== Point** arr(Point 더블포인터형)
	int arrlen;

	BoundCheckPointArray(const BoundCheckPointArray& arr) { }
	BoundCheckPointArray& operator=(const BoundCheckPointArray& arr) { }
public:
	BoundCheckPointArray(int len) : arrlen(len)
	{
		arr = new POINT_PTR[len];		//저장의 대상이 객체의 주소값이어서 포인터형 배열생성.
	}
	POINT_PTR& operator[](int idx)
	{
		if (idx < 0 || idx >= arrlen)
		{
			cout << "Array index out of bound exception" << endl;
			exit(1);
		}
		return arr[idx];
	}
	POINT_PTR operator[](int idx) const
	{
		if (idx < 0 || idx >= arrlen)
		{
			cout << "Array index out of bound exception" << endl;
			exit(1);
		}
		return arr[idx];
	}
	int GetArrLen() const { return arrlen; }
	~BoundCheckPointArray() { delete[] arr; }
};

int main(void)
{
	BoundCheckPointArray arr(3);
	arr[0] = new Point(3, 4);		//Point객체의 주소값을 저장.
	arr[1] = new Point(5, 8);		//객체의 주소값을 저장할 경우
	arr[2] = new Point(6, 7);		//얕은복사와 깊은복사에 대한 문제를 신경쓰지 않아도 된다.

	for (int i = 0; i < 3; i++)
		cout << *(arr[i]);

	delete arr[0];
	delete arr[1];
	delete arr[2];
	return 0;
}
